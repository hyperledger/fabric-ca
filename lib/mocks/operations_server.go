// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	metrics "github.com/hyperledger/fabric-lib-go/common/metrics"
	healthz "github.com/hyperledger/fabric-lib-go/healthz"
)

type OperationsServer struct {
	AddrStub        func() string
	addrMutex       sync.RWMutex
	addrArgsForCall []struct {
	}
	addrReturns struct {
		result1 string
	}
	addrReturnsOnCall map[int]struct {
		result1 string
	}
	NewCounterStub        func(metrics.CounterOpts) metrics.Counter
	newCounterMutex       sync.RWMutex
	newCounterArgsForCall []struct {
		arg1 metrics.CounterOpts
	}
	newCounterReturns struct {
		result1 metrics.Counter
	}
	newCounterReturnsOnCall map[int]struct {
		result1 metrics.Counter
	}
	NewGaugeStub        func(metrics.GaugeOpts) metrics.Gauge
	newGaugeMutex       sync.RWMutex
	newGaugeArgsForCall []struct {
		arg1 metrics.GaugeOpts
	}
	newGaugeReturns struct {
		result1 metrics.Gauge
	}
	newGaugeReturnsOnCall map[int]struct {
		result1 metrics.Gauge
	}
	NewHistogramStub        func(metrics.HistogramOpts) metrics.Histogram
	newHistogramMutex       sync.RWMutex
	newHistogramArgsForCall []struct {
		arg1 metrics.HistogramOpts
	}
	newHistogramReturns struct {
		result1 metrics.Histogram
	}
	newHistogramReturnsOnCall map[int]struct {
		result1 metrics.Histogram
	}
	RegisterCheckerStub        func(string, healthz.HealthChecker) error
	registerCheckerMutex       sync.RWMutex
	registerCheckerArgsForCall []struct {
		arg1 string
		arg2 healthz.HealthChecker
	}
	registerCheckerReturns struct {
		result1 error
	}
	registerCheckerReturnsOnCall map[int]struct {
		result1 error
	}
	StartStub        func() error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
	}
	startReturns struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	StopStub        func() error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	stopReturns struct {
		result1 error
	}
	stopReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationsServer) Addr() string {
	fake.addrMutex.Lock()
	ret, specificReturn := fake.addrReturnsOnCall[len(fake.addrArgsForCall)]
	fake.addrArgsForCall = append(fake.addrArgsForCall, struct {
	}{})
	fake.recordInvocation("Addr", []interface{}{})
	fake.addrMutex.Unlock()
	if fake.AddrStub != nil {
		return fake.AddrStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addrReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) AddrCallCount() int {
	fake.addrMutex.RLock()
	defer fake.addrMutex.RUnlock()
	return len(fake.addrArgsForCall)
}

func (fake *OperationsServer) AddrCalls(stub func() string) {
	fake.addrMutex.Lock()
	defer fake.addrMutex.Unlock()
	fake.AddrStub = stub
}

func (fake *OperationsServer) AddrReturns(result1 string) {
	fake.addrMutex.Lock()
	defer fake.addrMutex.Unlock()
	fake.AddrStub = nil
	fake.addrReturns = struct {
		result1 string
	}{result1}
}

func (fake *OperationsServer) AddrReturnsOnCall(i int, result1 string) {
	fake.addrMutex.Lock()
	defer fake.addrMutex.Unlock()
	fake.AddrStub = nil
	if fake.addrReturnsOnCall == nil {
		fake.addrReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.addrReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *OperationsServer) NewCounter(arg1 metrics.CounterOpts) metrics.Counter {
	fake.newCounterMutex.Lock()
	ret, specificReturn := fake.newCounterReturnsOnCall[len(fake.newCounterArgsForCall)]
	fake.newCounterArgsForCall = append(fake.newCounterArgsForCall, struct {
		arg1 metrics.CounterOpts
	}{arg1})
	fake.recordInvocation("NewCounter", []interface{}{arg1})
	fake.newCounterMutex.Unlock()
	if fake.NewCounterStub != nil {
		return fake.NewCounterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newCounterReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) NewCounterCallCount() int {
	fake.newCounterMutex.RLock()
	defer fake.newCounterMutex.RUnlock()
	return len(fake.newCounterArgsForCall)
}

func (fake *OperationsServer) NewCounterCalls(stub func(metrics.CounterOpts) metrics.Counter) {
	fake.newCounterMutex.Lock()
	defer fake.newCounterMutex.Unlock()
	fake.NewCounterStub = stub
}

func (fake *OperationsServer) NewCounterArgsForCall(i int) metrics.CounterOpts {
	fake.newCounterMutex.RLock()
	defer fake.newCounterMutex.RUnlock()
	argsForCall := fake.newCounterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OperationsServer) NewCounterReturns(result1 metrics.Counter) {
	fake.newCounterMutex.Lock()
	defer fake.newCounterMutex.Unlock()
	fake.NewCounterStub = nil
	fake.newCounterReturns = struct {
		result1 metrics.Counter
	}{result1}
}

func (fake *OperationsServer) NewCounterReturnsOnCall(i int, result1 metrics.Counter) {
	fake.newCounterMutex.Lock()
	defer fake.newCounterMutex.Unlock()
	fake.NewCounterStub = nil
	if fake.newCounterReturnsOnCall == nil {
		fake.newCounterReturnsOnCall = make(map[int]struct {
			result1 metrics.Counter
		})
	}
	fake.newCounterReturnsOnCall[i] = struct {
		result1 metrics.Counter
	}{result1}
}

func (fake *OperationsServer) NewGauge(arg1 metrics.GaugeOpts) metrics.Gauge {
	fake.newGaugeMutex.Lock()
	ret, specificReturn := fake.newGaugeReturnsOnCall[len(fake.newGaugeArgsForCall)]
	fake.newGaugeArgsForCall = append(fake.newGaugeArgsForCall, struct {
		arg1 metrics.GaugeOpts
	}{arg1})
	fake.recordInvocation("NewGauge", []interface{}{arg1})
	fake.newGaugeMutex.Unlock()
	if fake.NewGaugeStub != nil {
		return fake.NewGaugeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newGaugeReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) NewGaugeCallCount() int {
	fake.newGaugeMutex.RLock()
	defer fake.newGaugeMutex.RUnlock()
	return len(fake.newGaugeArgsForCall)
}

func (fake *OperationsServer) NewGaugeCalls(stub func(metrics.GaugeOpts) metrics.Gauge) {
	fake.newGaugeMutex.Lock()
	defer fake.newGaugeMutex.Unlock()
	fake.NewGaugeStub = stub
}

func (fake *OperationsServer) NewGaugeArgsForCall(i int) metrics.GaugeOpts {
	fake.newGaugeMutex.RLock()
	defer fake.newGaugeMutex.RUnlock()
	argsForCall := fake.newGaugeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OperationsServer) NewGaugeReturns(result1 metrics.Gauge) {
	fake.newGaugeMutex.Lock()
	defer fake.newGaugeMutex.Unlock()
	fake.NewGaugeStub = nil
	fake.newGaugeReturns = struct {
		result1 metrics.Gauge
	}{result1}
}

func (fake *OperationsServer) NewGaugeReturnsOnCall(i int, result1 metrics.Gauge) {
	fake.newGaugeMutex.Lock()
	defer fake.newGaugeMutex.Unlock()
	fake.NewGaugeStub = nil
	if fake.newGaugeReturnsOnCall == nil {
		fake.newGaugeReturnsOnCall = make(map[int]struct {
			result1 metrics.Gauge
		})
	}
	fake.newGaugeReturnsOnCall[i] = struct {
		result1 metrics.Gauge
	}{result1}
}

func (fake *OperationsServer) NewHistogram(arg1 metrics.HistogramOpts) metrics.Histogram {
	fake.newHistogramMutex.Lock()
	ret, specificReturn := fake.newHistogramReturnsOnCall[len(fake.newHistogramArgsForCall)]
	fake.newHistogramArgsForCall = append(fake.newHistogramArgsForCall, struct {
		arg1 metrics.HistogramOpts
	}{arg1})
	fake.recordInvocation("NewHistogram", []interface{}{arg1})
	fake.newHistogramMutex.Unlock()
	if fake.NewHistogramStub != nil {
		return fake.NewHistogramStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newHistogramReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) NewHistogramCallCount() int {
	fake.newHistogramMutex.RLock()
	defer fake.newHistogramMutex.RUnlock()
	return len(fake.newHistogramArgsForCall)
}

func (fake *OperationsServer) NewHistogramCalls(stub func(metrics.HistogramOpts) metrics.Histogram) {
	fake.newHistogramMutex.Lock()
	defer fake.newHistogramMutex.Unlock()
	fake.NewHistogramStub = stub
}

func (fake *OperationsServer) NewHistogramArgsForCall(i int) metrics.HistogramOpts {
	fake.newHistogramMutex.RLock()
	defer fake.newHistogramMutex.RUnlock()
	argsForCall := fake.newHistogramArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OperationsServer) NewHistogramReturns(result1 metrics.Histogram) {
	fake.newHistogramMutex.Lock()
	defer fake.newHistogramMutex.Unlock()
	fake.NewHistogramStub = nil
	fake.newHistogramReturns = struct {
		result1 metrics.Histogram
	}{result1}
}

func (fake *OperationsServer) NewHistogramReturnsOnCall(i int, result1 metrics.Histogram) {
	fake.newHistogramMutex.Lock()
	defer fake.newHistogramMutex.Unlock()
	fake.NewHistogramStub = nil
	if fake.newHistogramReturnsOnCall == nil {
		fake.newHistogramReturnsOnCall = make(map[int]struct {
			result1 metrics.Histogram
		})
	}
	fake.newHistogramReturnsOnCall[i] = struct {
		result1 metrics.Histogram
	}{result1}
}

func (fake *OperationsServer) RegisterChecker(arg1 string, arg2 healthz.HealthChecker) error {
	fake.registerCheckerMutex.Lock()
	ret, specificReturn := fake.registerCheckerReturnsOnCall[len(fake.registerCheckerArgsForCall)]
	fake.registerCheckerArgsForCall = append(fake.registerCheckerArgsForCall, struct {
		arg1 string
		arg2 healthz.HealthChecker
	}{arg1, arg2})
	fake.recordInvocation("RegisterChecker", []interface{}{arg1, arg2})
	fake.registerCheckerMutex.Unlock()
	if fake.RegisterCheckerStub != nil {
		return fake.RegisterCheckerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.registerCheckerReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) RegisterCheckerCallCount() int {
	fake.registerCheckerMutex.RLock()
	defer fake.registerCheckerMutex.RUnlock()
	return len(fake.registerCheckerArgsForCall)
}

func (fake *OperationsServer) RegisterCheckerCalls(stub func(string, healthz.HealthChecker) error) {
	fake.registerCheckerMutex.Lock()
	defer fake.registerCheckerMutex.Unlock()
	fake.RegisterCheckerStub = stub
}

func (fake *OperationsServer) RegisterCheckerArgsForCall(i int) (string, healthz.HealthChecker) {
	fake.registerCheckerMutex.RLock()
	defer fake.registerCheckerMutex.RUnlock()
	argsForCall := fake.registerCheckerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *OperationsServer) RegisterCheckerReturns(result1 error) {
	fake.registerCheckerMutex.Lock()
	defer fake.registerCheckerMutex.Unlock()
	fake.RegisterCheckerStub = nil
	fake.registerCheckerReturns = struct {
		result1 error
	}{result1}
}

func (fake *OperationsServer) RegisterCheckerReturnsOnCall(i int, result1 error) {
	fake.registerCheckerMutex.Lock()
	defer fake.registerCheckerMutex.Unlock()
	fake.RegisterCheckerStub = nil
	if fake.registerCheckerReturnsOnCall == nil {
		fake.registerCheckerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerCheckerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OperationsServer) Start() error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
	}{})
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.startReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *OperationsServer) StartCalls(stub func() error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *OperationsServer) StartReturns(result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *OperationsServer) StartReturnsOnCall(i int, result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OperationsServer) Stop() error {
	fake.stopMutex.Lock()
	ret, specificReturn := fake.stopReturnsOnCall[len(fake.stopArgsForCall)]
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stopReturns
	return fakeReturns.result1
}

func (fake *OperationsServer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *OperationsServer) StopCalls(stub func() error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *OperationsServer) StopReturns(result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *OperationsServer) StopReturnsOnCall(i int, result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	if fake.stopReturnsOnCall == nil {
		fake.stopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OperationsServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addrMutex.RLock()
	defer fake.addrMutex.RUnlock()
	fake.newCounterMutex.RLock()
	defer fake.newCounterMutex.RUnlock()
	fake.newGaugeMutex.RLock()
	defer fake.newGaugeMutex.RUnlock()
	fake.newHistogramMutex.RLock()
	defer fake.newHistogramMutex.RUnlock()
	fake.registerCheckerMutex.RLock()
	defer fake.registerCheckerMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationsServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
