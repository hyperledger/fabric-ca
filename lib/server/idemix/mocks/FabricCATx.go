// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// FabricCATx is an autogenerated mock type for the FabricCATx type
type FabricCATx struct {
	mock.Mock
}

// Commit provides a mock function with given fields: funcName
func (_m *FabricCATx) Commit(funcName string) error {
	ret := _m.Called(funcName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(funcName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: funcName, query, args
func (_m *FabricCATx) Exec(funcName string, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, funcName, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) sql.Result); ok {
		r0 = rf(funcName, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(funcName, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: funcName, dest, query, args
func (_m *FabricCATx) Get(funcName string, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, funcName, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, string, ...interface{}) error); ok {
		r0 = rf(funcName, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queryx provides a mock function with given fields: funcName, query, args
func (_m *FabricCATx) Queryx(funcName string, query string, args ...interface{}) (*sqlx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, funcName, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sqlx.Rows
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) *sqlx.Rows); ok {
		r0 = rf(funcName, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(funcName, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rebind provides a mock function with given fields: query
func (_m *FabricCATx) Rebind(query string) string {
	ret := _m.Called(query)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Rollback provides a mock function with given fields: funcName
func (_m *FabricCATx) Rollback(funcName string) error {
	ret := _m.Called(funcName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(funcName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: funcName, dest, query, args
func (_m *FabricCATx) Select(funcName string, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, funcName, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, string, ...interface{}) error); ok {
		r0 = rf(funcName, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
