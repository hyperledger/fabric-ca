// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import db "github.com/hyperledger/fabric-ca/lib/server/db"
import mock "github.com/stretchr/testify/mock"
import sql "database/sql"
import sqlx "github.com/jmoiron/sqlx"

// FabricCADB is an autogenerated mock type for the FabricCADB type
type FabricCADB struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields:
func (_m *FabricCADB) BeginTx() db.FabricCATx {
	ret := _m.Called()

	var r0 db.FabricCATx
	if rf, ok := ret.Get(0).(func() db.FabricCATx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.FabricCATx)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *FabricCADB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DriverName provides a mock function with given fields:
func (_m *FabricCADB) DriverName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Exec provides a mock function with given fields: funcName, query, args
func (_m *FabricCADB) Exec(funcName string, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, funcName, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) sql.Result); ok {
		r0 = rf(funcName, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(funcName, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: funcName, dest, query, args
func (_m *FabricCADB) Get(funcName string, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, funcName, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, string, ...interface{}) error); ok {
		r0 = rf(funcName, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsInitialized provides a mock function with given fields:
func (_m *FabricCADB) IsInitialized() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MustBegin provides a mock function with given fields:
func (_m *FabricCADB) MustBegin() *sqlx.Tx {
	ret := _m.Called()

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	return r0
}

// NamedExec provides a mock function with given fields: funcName, query, arg
func (_m *FabricCADB) NamedExec(funcName string, query string, arg interface{}) (sql.Result, error) {
	ret := _m.Called(funcName, query, arg)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, string, interface{}) sql.Result); ok {
		r0 = rf(funcName, query, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(funcName, query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingContext provides a mock function with given fields: ctx
func (_m *FabricCADB) PingContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Queryx provides a mock function with given fields: funcName, query, args
func (_m *FabricCADB) Queryx(funcName string, query string, args ...interface{}) (*sqlx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, funcName, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sqlx.Rows
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) *sqlx.Rows); ok {
		r0 = rf(funcName, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(funcName, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rebind provides a mock function with given fields: query
func (_m *FabricCADB) Rebind(query string) string {
	ret := _m.Called(query)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Select provides a mock function with given fields: funcName, dest, query, args
func (_m *FabricCADB) Select(funcName string, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, funcName, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, string, ...interface{}) error); ok {
		r0 = rf(funcName, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDBInitialized provides a mock function with given fields: _a0
func (_m *FabricCADB) SetDBInitialized(_a0 bool) {
	_m.Called(_a0)
}

// SetMaxOpenConns provides a mock function with given fields: n
func (_m *FabricCADB) SetMaxOpenConns(n int) {
	_m.Called(n)
}
