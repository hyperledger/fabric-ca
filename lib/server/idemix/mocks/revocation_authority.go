// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	types "github.com/IBM/idemix/bccsp/types"
	mock "github.com/stretchr/testify/mock"
)

// RevocationAuthority is an autogenerated mock type for the RevocationAuthority type
type RevocationAuthority struct {
	mock.Mock
}

// CreateCRI provides a mock function with given fields:
func (_m *RevocationAuthority) CreateCRI() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Epoch provides a mock function with given fields:
func (_m *RevocationAuthority) Epoch() (int, error) {
	ret := _m.Called()

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewRevocationHandle provides a mock function with given fields:
func (_m *RevocationAuthority) GetNewRevocationHandle() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicKey provides a mock function with given fields:
func (_m *RevocationAuthority) PublicKey() types.Key {
	ret := _m.Called()

	var r0 types.Key
	if rf, ok := ret.Get(0).(func() types.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Key)
		}
	}

	return r0
}

// NewRevocationAuthority creates a new instance of RevocationAuthority. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRevocationAuthority(t interface {
	mock.TestingT
	Cleanup(func())
}) *RevocationAuthority {
	mock := &RevocationAuthority{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
