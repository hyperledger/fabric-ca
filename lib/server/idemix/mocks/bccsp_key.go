// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	types "github.com/IBM/idemix/bccsp/types"
	mock "github.com/stretchr/testify/mock"
)

// BccspKey is an autogenerated mock type for the BccspKey type
type BccspKey struct {
	mock.Mock
}

// Bytes provides a mock function with given fields:
func (_m *BccspKey) Bytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Private provides a mock function with given fields:
func (_m *BccspKey) Private() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PublicKey provides a mock function with given fields:
func (_m *BccspKey) PublicKey() (types.Key, error) {
	ret := _m.Called()

	var r0 types.Key
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.Key, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Key)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SKI provides a mock function with given fields:
func (_m *BccspKey) SKI() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Symmetric provides a mock function with given fields:
func (_m *BccspKey) Symmetric() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewBccspKey creates a new instance of BccspKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBccspKey(t interface {
	mock.TestingT
	Cleanup(func())
}) *BccspKey {
	mock := &BccspKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
